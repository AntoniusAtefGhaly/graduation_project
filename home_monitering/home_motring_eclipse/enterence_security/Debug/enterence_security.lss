
enterence_security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000021da  0000226e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800088  00800088  00002296  2**0
                  ALLOC
  3 .stab         00001fe0  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d9f  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005017  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005177  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005306  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000734b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000844c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000093d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009812  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <main>
      8a:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 af 10 	jmp	0x215e	; 0x215e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_9>:
#include"UltraSonic.h"
#include "lcd.h"
int TimerOverflow = 0,distance;

ISR(TIMER1_OVF_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++;	/* Increment Timer Overflow count */
     cb4:	80 91 88 00 	lds	r24, 0x0088
     cb8:	90 91 89 00 	lds	r25, 0x0089
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	90 93 89 00 	sts	0x0089, r25
     cc2:	80 93 88 00 	sts	0x0088, r24
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <UltraSonic_init>:

void UltraSonic_init(void)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	DDRD |=(1<<PD7);
     ce0:	a1 e3       	ldi	r26, 0x31	; 49
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e1 e3       	ldi	r30, 0x31	; 49
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	80 68       	ori	r24, 0x80	; 128
     cec:	8c 93       	st	X, r24
	PORTD |=(1<<6);
     cee:	a2 e3       	ldi	r26, 0x32	; 50
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e2 e3       	ldi	r30, 0x32	; 50
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	80 64       	ori	r24, 0x40	; 64
     cfa:	8c 93       	st	X, r24
	sei();			/* Enable global interrupt */
     cfc:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
     cfe:	e9 e5       	ldi	r30, 0x59	; 89
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	80 83       	st	Z, r24
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
     d06:	ef e4       	ldi	r30, 0x4F	; 79
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	10 82       	st	Z, r1

}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <getDistance>:

int	getDistance(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	6c 97       	sbiw	r28, 0x1c	; 28
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
	int distance=0,count=0;
     d26:	1c 8e       	std	Y+28, r1	; 0x1c
     d28:	1b 8e       	std	Y+27, r1	; 0x1b
     d2a:	1a 8e       	std	Y+26, r1	; 0x1a
     d2c:	19 8e       	std	Y+25, r1	; 0x19
	/**** GENERATE triger pulse 10 usec to trig pin ****/
	PORTD |= (1 << 7);
     d2e:	a2 e3       	ldi	r26, 0x32	; 50
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e2 e3       	ldi	r30, 0x32	; 50
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	8c 93       	st	X, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a0 e2       	ldi	r26, 0x20	; 32
     d42:	b1 e4       	ldi	r27, 0x41	; 65
     d44:	8d 8b       	std	Y+21, r24	; 0x15
     d46:	9e 8b       	std	Y+22, r25	; 0x16
     d48:	af 8b       	std	Y+23, r26	; 0x17
     d4a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d4c:	6d 89       	ldd	r22, Y+21	; 0x15
     d4e:	7e 89       	ldd	r23, Y+22	; 0x16
     d50:	8f 89       	ldd	r24, Y+23	; 0x17
     d52:	98 8d       	ldd	r25, Y+24	; 0x18
     d54:	2b ea       	ldi	r18, 0xAB	; 171
     d56:	3a ea       	ldi	r19, 0xAA	; 170
     d58:	4a e2       	ldi	r20, 0x2A	; 42
     d5a:	50 e4       	ldi	r21, 0x40	; 64
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	89 8b       	std	Y+17, r24	; 0x11
     d66:	9a 8b       	std	Y+18, r25	; 0x12
     d68:	ab 8b       	std	Y+19, r26	; 0x13
     d6a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d6c:	69 89       	ldd	r22, Y+17	; 0x11
     d6e:	7a 89       	ldd	r23, Y+18	; 0x12
     d70:	8b 89       	ldd	r24, Y+19	; 0x13
     d72:	9c 89       	ldd	r25, Y+20	; 0x14
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d80:	88 23       	and	r24, r24
     d82:	1c f4       	brge	.+6      	; 0xd8a <getDistance+0x78>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	88 8b       	std	Y+16, r24	; 0x10
     d88:	91 c0       	rjmp	.+290    	; 0xeac <getDistance+0x19a>
	else if (__tmp > 255)
     d8a:	69 89       	ldd	r22, Y+17	; 0x11
     d8c:	7a 89       	ldd	r23, Y+18	; 0x12
     d8e:	8b 89       	ldd	r24, Y+19	; 0x13
     d90:	9c 89       	ldd	r25, Y+20	; 0x14
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4f e7       	ldi	r20, 0x7F	; 127
     d98:	53 e4       	ldi	r21, 0x43	; 67
     d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d9e:	18 16       	cp	r1, r24
     da0:	0c f0       	brlt	.+2      	; 0xda4 <getDistance+0x92>
     da2:	7b c0       	rjmp	.+246    	; 0xe9a <getDistance+0x188>
	{
		_delay_ms(__us / 1000.0);
     da4:	6d 89       	ldd	r22, Y+21	; 0x15
     da6:	7e 89       	ldd	r23, Y+22	; 0x16
     da8:	8f 89       	ldd	r24, Y+23	; 0x17
     daa:	98 8d       	ldd	r25, Y+24	; 0x18
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	4a e7       	ldi	r20, 0x7A	; 122
     db2:	54 e4       	ldi	r21, 0x44	; 68
     db4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	8c 87       	std	Y+12, r24	; 0x0c
     dbe:	9d 87       	std	Y+13, r25	; 0x0d
     dc0:	ae 87       	std	Y+14, r26	; 0x0e
     dc2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	6c 85       	ldd	r22, Y+12	; 0x0c
     dc6:	7d 85       	ldd	r23, Y+13	; 0x0d
     dc8:	8e 85       	ldd	r24, Y+14	; 0x0e
     dca:	9f 85       	ldd	r25, Y+15	; 0x0f
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a ef       	ldi	r20, 0xFA	; 250
     dd2:	54 e4       	ldi	r21, 0x44	; 68
     dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	88 87       	std	Y+8, r24	; 0x08
     dde:	99 87       	std	Y+9, r25	; 0x09
     de0:	aa 87       	std	Y+10, r26	; 0x0a
     de2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     de4:	68 85       	ldd	r22, Y+8	; 0x08
     de6:	79 85       	ldd	r23, Y+9	; 0x09
     de8:	8a 85       	ldd	r24, Y+10	; 0x0a
     dea:	9b 85       	ldd	r25, Y+11	; 0x0b
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <getDistance+0xf4>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9f 83       	std	Y+7, r25	; 0x07
     e02:	8e 83       	std	Y+6, r24	; 0x06
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <getDistance+0x172>
	else if (__tmp > 65535)
     e06:	68 85       	ldd	r22, Y+8	; 0x08
     e08:	79 85       	ldd	r23, Y+9	; 0x09
     e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <getDistance+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	6c 85       	ldd	r22, Y+12	; 0x0c
     e20:	7d 85       	ldd	r23, Y+13	; 0x0d
     e22:	8e 85       	ldd	r24, Y+14	; 0x0e
     e24:	9f 85       	ldd	r25, Y+15	; 0x0f
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9f 83       	std	Y+7, r25	; 0x07
     e44:	8e 83       	std	Y+6, r24	; 0x06
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <getDistance+0x154>
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9d 83       	std	Y+5, r25	; 0x05
     e4e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <getDistance+0x142>
     e58:	9d 83       	std	Y+5, r25	; 0x05
     e5a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9f 83       	std	Y+7, r25	; 0x07
     e64:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8e 81       	ldd	r24, Y+6	; 0x06
     e68:	9f 81       	ldd	r25, Y+7	; 0x07
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <getDistance+0x136>
     e6e:	24 c0       	rjmp	.+72     	; 0xeb8 <getDistance+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	68 85       	ldd	r22, Y+8	; 0x08
     e72:	79 85       	ldd	r23, Y+9	; 0x09
     e74:	8a 85       	ldd	r24, Y+10	; 0x0a
     e76:	9b 85       	ldd	r25, Y+11	; 0x0b
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9f 83       	std	Y+7, r25	; 0x07
     e82:	8e 83       	std	Y+6, r24	; 0x06
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	9b 83       	std	Y+3, r25	; 0x03
     e8a:	8a 83       	std	Y+2, r24	; 0x02
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <getDistance+0x17e>
     e94:	9b 83       	std	Y+3, r25	; 0x03
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <getDistance+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e9a:	69 89       	ldd	r22, Y+17	; 0x11
     e9c:	7a 89       	ldd	r23, Y+18	; 0x12
     e9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ea0:	9c 89       	ldd	r25, Y+20	; 0x14
     ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	88 8b       	std	Y+16, r24	; 0x10
     eac:	88 89       	ldd	r24, Y+16	; 0x10
     eae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8a 95       	dec	r24
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <getDistance+0x1a0>
     eb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	PORTD &= (~(1 << 7));
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 77       	andi	r24, 0x7F	; 127
     ec4:	8c 93       	st	X, r24

	/***** detect the raising edge of the echo pulse
	 *  (indicate the start time of reflect wave)*/
	TCNT1 = 0;	 /* Clear Timer counter */
     ec6:	ec e4       	ldi	r30, 0x4C	; 76
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	11 82       	std	Z+1, r1	; 0x01
     ecc:	10 82       	st	Z, r1
	TCCR1B =(1<<ICES1) | (1<<CS11)|(1<<CS10);	/* Capture on rising edge prescaler=64*/
     ece:	ee e4       	ldi	r30, 0x4E	; 78
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	83 e4       	ldi	r24, 0x43	; 67
     ed4:	80 83       	st	Z, r24
	TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     ed6:	e8 e5       	ldi	r30, 0x58	; 88
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	80 83       	st	Z, r24
	TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     ede:	e8 e5       	ldi	r30, 0x58	; 88
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	80 83       	st	Z, r24
	/*Calculate width of Echo by Input Capture (ICP) */

	while ((TIFR & (1 << ICF1)) == 0); /* Wait for rising edge */
     ee6:	e8 e5       	ldi	r30, 0x58	; 88
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	80 72       	andi	r24, 0x20	; 32
     ef2:	90 70       	andi	r25, 0x00	; 0
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	b9 f3       	breq	.-18     	; 0xee6 <getDistance+0x1d4>

	/***** detect the fallen edge of the echo pulse
	 *  (indicate the end time of reflect wave)*/
	TCNT1 = 0;	/* Clear Timer counter */
     ef8:	ec e4       	ldi	r30, 0x4C	; 76
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	11 82       	std	Z+1, r1	; 0x01
     efe:	10 82       	st	Z, r1
	TCCR1B =(1<<CS11)|(1<<CS10);	/* Capture on falling edge,prescaler=64 */
     f00:	ee e4       	ldi	r30, 0x4E	; 78
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	80 83       	st	Z, r24
	//TCCR1B =(1<<CS12);	/* Capture on falling edge,prescaler=256 */
	//TCCR1B =(1<<CS11);	/* Capture on falling edge,prescaler=8*/

	TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     f08:	e8 e5       	ldi	r30, 0x58	; 88
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	80 83       	st	Z, r24
	TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     f10:	e8 e5       	ldi	r30, 0x58	; 88
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	80 83       	st	Z, r24
	while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
     f18:	e8 e5       	ldi	r30, 0x58	; 88
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	80 72       	andi	r24, 0x20	; 32
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	b9 f3       	breq	.-18     	; 0xf18 <getDistance+0x206>
	count = ICR1;	/* Take count */
     f2a:	e6 e4       	ldi	r30, 0x46	; 70
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	9a 8f       	std	Y+26, r25	; 0x1a
     f34:	89 8f       	std	Y+25, r24	; 0x19
	/*
	 * dis = 0.5 * (no of counts *pres * 340 m/s) / (clk freq)
	 */
	//distance = count/735; //in meter count/735

	distance = count/7; //in cm
     f36:	89 8d       	ldd	r24, Y+25	; 0x19
     f38:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f3a:	27 e0       	ldi	r18, 0x07	; 7
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	b9 01       	movw	r22, r18
     f40:	0e 94 3a 10 	call	0x2074	; 0x2074 <__divmodhi4>
     f44:	cb 01       	movw	r24, r22
     f46:	9c 8f       	std	Y+28, r25	; 0x1c
     f48:	8b 8f       	std	Y+27, r24	; 0x1b
return distance;
     f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <UltraSonic_display_distance>:
void UltraSonic_display_distance(void)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     f68:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_clearScreen>
	LCD_displayString( "Distance =  ");
     f6c:	80 e6       	ldi	r24, 0x60	; 96
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_displayString>
	distance=getDistance();
     f74:	0e 94 89 06 	call	0xd12	; 0xd12 <getDistance>
     f78:	90 93 8d 00 	sts	0x008D, r25
     f7c:	80 93 8c 00 	sts	0x008C, r24
	LCD_goToRowColumn(1,5);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	65 e0       	ldi	r22, 0x05	; 5
     f84:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <LCD_goToRowColumn>
	LCD_intgerToString(distance);
     f88:	80 91 8c 00 	lds	r24, 0x008C
     f8c:	90 91 8d 00 	lds	r25, 0x008D
     f90:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_intgerToString>
	LCD_displayString( " cm ");
     f94:	8d e6       	ldi	r24, 0x6D	; 109
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_displayString>

}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <adc_init>:
 *      Author: Antonius Atef
 */
#include "adc.h"

/**** initialize adc *****/
void adc_init(){
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	 * bit 7:6  REFS1:REFS0  = 00 TO CHOISE AREF as input volt reference
	 * bit 5  ADLAR  = 0 TO RIGHT ADJUST OF the 2 reg high & low of ADC
	 * bit 4:0  MUX4 : MUX0 =  0000 to choise channel 0 at PORTA 0
	 */

	ADMUX =0;
     faa:	e7 e2       	ldi	r30, 0x27	; 39
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	10 82       	st	Z, r1
	 * bit7 - ADEN  = 1 to enable ADC
	 * bit -  ADIN =0 disable interupt
	 * bit 2:0 ADPS2:ADPS0 = 011 USE prescaller =8 1MHZ/8 = 125 KHZ
	 */

	ADCSRA |= (1<<ADEN) | (1<<ADPS0)| (1<<ADPS1);
     fb0:	a6 e2       	ldi	r26, 0x26	; 38
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e6 e2       	ldi	r30, 0x26	; 38
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	83 68       	ori	r24, 0x83	; 131
     fbc:	8c 93       	st	X, r24


}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <adc_read_channel>:

uint16  adc_read_channel(uint8 channel_num){
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	0f 92       	push	r0
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= channel_num;   //selecting channel which use
     fd0:	a7 e2       	ldi	r26, 0x27	; 39
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e7 e2       	ldi	r30, 0x27	; 39
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	90 81       	ld	r25, Z
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	89 2b       	or	r24, r25
     fde:	8c 93       	st	X, r24
	channel_num &=0X07;     //BE SURE CHANNEL_num < 7;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	87 70       	andi	r24, 0x07	; 7
     fe4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX |= channel_num;	//SELECT THE CHANNEL NUM
     fe6:	a7 e2       	ldi	r26, 0x27	; 39
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e7 e2       	ldi	r30, 0x27	; 39
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	90 81       	ld	r25, Z
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	89 2b       	or	r24, r25
     ff4:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC); 	//ADC start conversion
     ff6:	a6 e2       	ldi	r26, 0x26	; 38
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e6 e2       	ldi	r30, 0x26	; 38
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 64       	ori	r24, 0x40	; 64
    1002:	8c 93       	st	X, r24
	while(!(ADCSRA&(1<<ADIF))); //wait untle coversion occure and the interupt flage return 1
    1004:	e6 e2       	ldi	r30, 0x26	; 38
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	80 71       	andi	r24, 0x10	; 16
    1010:	90 70       	andi	r25, 0x00	; 0
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	b9 f3       	breq	.-18     	; 0x1004 <adc_read_channel+0x40>
	ADCSRA &= ~(1<<ADIF);  		//clear the interupt flag to be set in next conversion
    1016:	a6 e2       	ldi	r26, 0x26	; 38
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e6 e2       	ldi	r30, 0x26	; 38
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	8c 93       	st	X, r24
return ADC;
    1024:	e4 e2       	ldi	r30, 0x24	; 36
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
}
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <leds_init>:
 *  Created on:07/03/2018  10:54 pm
 *      Author: Antonius Atef
 */

#include "buttons_leds.h"
void leds_init(){
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	LEDS_DDR |=(1<<RED_LED)|(1<<YEL_LED)|(1<<GRN_LED);
    103c:	a7 e3       	ldi	r26, 0x37	; 55
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e7 e3       	ldi	r30, 0x37	; 55
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	87 60       	ori	r24, 0x07	; 7
    1048:	8c 93       	st	X, r24
	LEDS_PORT &=~((1<<RED_LED)|(1<<YEL_LED)|(1<<GRN_LED)) ;
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 7f       	andi	r24, 0xF8	; 248
    1056:	8c 93       	st	X, r24
}
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <on_led>:

void on_led (uint8 led_colour){
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
	LEDS_PORT |=(1<<led_colour);
    106a:	a8 e3       	ldi	r26, 0x38	; 56
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e8 e3       	ldi	r30, 0x38	; 56
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <on_led+0x2a>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <on_led+0x26>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
}
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <off_led>:

void off_led (uint8 led_colour){
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	0f 92       	push	r0
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	89 83       	std	Y+1, r24	; 0x01
	LEDS_PORT &=~(1<<led_colour);
    10a4:	a8 e3       	ldi	r26, 0x38	; 56
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e3       	ldi	r30, 0x38	; 56
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <off_led+0x2a>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <off_led+0x26>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
}
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <INT0_Init>:



/***** FUNCTION FOR ENABLE INT0 (button 0)*****/
void INT0_Init(void){
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
	SREG &= (~(1<<7));      //disable INT general flag
    10dc:	af e5       	ldi	r26, 0x5F	; 95
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ef e5       	ldi	r30, 0x5F	; 95
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8f 77       	andi	r24, 0x7F	; 127
    10e8:	8c 93       	st	X, r24
	DDRD &= (~(1<<2));		//CONFIG PD2 AS INPUT PIN
    10ea:	a1 e3       	ldi	r26, 0x31	; 49
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e1 e3       	ldi	r30, 0x31	; 49
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8b 7f       	andi	r24, 0xFB	; 251
    10f6:	8c 93       	st	X, r24
	GICR |= (1<<INT0);         //enable external INT0 pin
    10f8:	ab e5       	ldi	r26, 0x5B	; 91
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	eb e5       	ldi	r30, 0x5B	; 91
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 64       	ori	r24, 0x40	; 64
    1104:	8c 93       	st	X, r24
	MCUCR |= (1<<1) |(1<<0); //SET int1 as raising edge interrupt
    1106:	a5 e5       	ldi	r26, 0x55	; 85
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e5 e5       	ldi	r30, 0x55	; 85
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	83 60       	ori	r24, 0x03	; 3
    1112:	8c 93       	st	X, r24
	SREG|=(1<<7);					//enable INT general flag
    1114:	af e5       	ldi	r26, 0x5F	; 95
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ef e5       	ldi	r30, 0x5F	; 95
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	8c 93       	st	X, r24
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <INT1_Init>:

/***** FUNCTION FOR ENABLE INT1 (button 1)*****/
void INT1_Init(void){
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	SREG &= (~(1<<7));      //disable INT general flag
    1130:	af e5       	ldi	r26, 0x5F	; 95
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ef e5       	ldi	r30, 0x5F	; 95
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8f 77       	andi	r24, 0x7F	; 127
    113c:	8c 93       	st	X, r24
	DDRD &= (~(1<<3));		//CONFIG PD2 AS INPUT PIN
    113e:	a1 e3       	ldi	r26, 0x31	; 49
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e1 e3       	ldi	r30, 0x31	; 49
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	87 7f       	andi	r24, 0xF7	; 247
    114a:	8c 93       	st	X, r24
	GICR |= (1<<INT1);         //enable external INT1 pin
    114c:	ab e5       	ldi	r26, 0x5B	; 91
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e5       	ldi	r30, 0x5B	; 91
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 68       	ori	r24, 0x80	; 128
    1158:	8c 93       	st	X, r24
	MCUCR |= (1<<1) |(1<<0); //SET int1 as raising edge interrupt
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	83 60       	ori	r24, 0x03	; 3
    1166:	8c 93       	st	X, r24
	SREG|=(1<<7);					//enable INT general flag
    1168:	af e5       	ldi	r26, 0x5F	; 95
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ef e5       	ldi	r30, 0x5F	; 95
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	80 68       	ori	r24, 0x80	; 128
    1174:	8c 93       	st	X, r24
}
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <LCD_init>:
 */

#include "lcd.h"

void LCD_init(void)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1184:	aa e3       	ldi	r26, 0x3A	; 58
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	ea e3       	ldi	r30, 0x3A	; 58
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	80 67       	ori	r24, 0x70	; 112
    1190:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    1192:	e4 e3       	ldi	r30, 0x34	; 52
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    119a:	88 e3       	ldi	r24, 0x38	; 56
    119c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    11a0:	8c e0       	ldi	r24, 0x0C	; 12
    11a2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_sendCommand>
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	e9 97       	sbiw	r28, 0x39	; 57
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7e       	andi	r24, 0xEF	; 239
    11d4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 7d       	andi	r24, 0xDF	; 223
    11e2:	8c 93       	st	X, r24
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a0 e8       	ldi	r26, 0x80	; 128
    11ea:	bf e3       	ldi	r27, 0x3F	; 63
    11ec:	8d ab       	std	Y+53, r24	; 0x35
    11ee:	9e ab       	std	Y+54, r25	; 0x36
    11f0:	af ab       	std	Y+55, r26	; 0x37
    11f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6d a9       	ldd	r22, Y+53	; 0x35
    11f6:	7e a9       	ldd	r23, Y+54	; 0x36
    11f8:	8f a9       	ldd	r24, Y+55	; 0x37
    11fa:	98 ad       	ldd	r25, Y+56	; 0x38
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	89 ab       	std	Y+49, r24	; 0x31
    120e:	9a ab       	std	Y+50, r25	; 0x32
    1210:	ab ab       	std	Y+51, r26	; 0x33
    1212:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1214:	69 a9       	ldd	r22, Y+49	; 0x31
    1216:	7a a9       	ldd	r23, Y+50	; 0x32
    1218:	8b a9       	ldd	r24, Y+51	; 0x33
    121a:	9c a9       	ldd	r25, Y+52	; 0x34
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <LCD_sendCommand+0x84>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1236:	69 a9       	ldd	r22, Y+49	; 0x31
    1238:	7a a9       	ldd	r23, Y+50	; 0x32
    123a:	8b a9       	ldd	r24, Y+51	; 0x33
    123c:	9c a9       	ldd	r25, Y+52	; 0x34
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6d a9       	ldd	r22, Y+53	; 0x35
    1250:	7e a9       	ldd	r23, Y+54	; 0x36
    1252:	8f a9       	ldd	r24, Y+55	; 0x37
    1254:	98 ad       	ldd	r25, Y+56	; 0x38
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	98 ab       	std	Y+48, r25	; 0x30
    1274:	8f a7       	std	Y+47, r24	; 0x2f
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <LCD_sendCommand+0xe4>
    1278:	88 ec       	ldi	r24, 0xC8	; 200
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9e a7       	std	Y+46, r25	; 0x2e
    127e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1280:	8d a5       	ldd	r24, Y+45	; 0x2d
    1282:	9e a5       	ldd	r25, Y+46	; 0x2e
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <LCD_sendCommand+0xd2>
    1288:	9e a7       	std	Y+46, r25	; 0x2e
    128a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	8f a5       	ldd	r24, Y+47	; 0x2f
    128e:	98 a9       	ldd	r25, Y+48	; 0x30
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	98 ab       	std	Y+48, r25	; 0x30
    1294:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	8f a5       	ldd	r24, Y+47	; 0x2f
    1298:	98 a9       	ldd	r25, Y+48	; 0x30
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <LCD_sendCommand+0xc6>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	69 a9       	ldd	r22, Y+49	; 0x31
    12a2:	7a a9       	ldd	r23, Y+50	; 0x32
    12a4:	8b a9       	ldd	r24, Y+51	; 0x33
    12a6:	9c a9       	ldd	r25, Y+52	; 0x34
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	98 ab       	std	Y+48, r25	; 0x30
    12b2:	8f a7       	std	Y+47, r24	; 0x2f
    12b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b6:	98 a9       	ldd	r25, Y+48	; 0x30
    12b8:	9c a7       	std	Y+44, r25	; 0x2c
    12ba:	8b a7       	std	Y+43, r24	; 0x2b
    12bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    12be:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <LCD_sendCommand+0x10e>
    12c4:	9c a7       	std	Y+44, r25	; 0x2c
    12c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	80 64       	ori	r24, 0x40	; 64
    12d4:	8c 93       	st	X, r24
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a0 e8       	ldi	r26, 0x80	; 128
    12dc:	bf e3       	ldi	r27, 0x3F	; 63
    12de:	8f a3       	std	Y+39, r24	; 0x27
    12e0:	98 a7       	std	Y+40, r25	; 0x28
    12e2:	a9 a7       	std	Y+41, r26	; 0x29
    12e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	6f a1       	ldd	r22, Y+39	; 0x27
    12e8:	78 a5       	ldd	r23, Y+40	; 0x28
    12ea:	89 a5       	ldd	r24, Y+41	; 0x29
    12ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	4a ef       	ldi	r20, 0xFA	; 250
    12f4:	54 e4       	ldi	r21, 0x44	; 68
    12f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	8b a3       	std	Y+35, r24	; 0x23
    1300:	9c a3       	std	Y+36, r25	; 0x24
    1302:	ad a3       	std	Y+37, r26	; 0x25
    1304:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1306:	6b a1       	ldd	r22, Y+35	; 0x23
    1308:	7c a1       	ldd	r23, Y+36	; 0x24
    130a:	8d a1       	ldd	r24, Y+37	; 0x25
    130c:	9e a1       	ldd	r25, Y+38	; 0x26
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	5f e3       	ldi	r21, 0x3F	; 63
    1316:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131a:	88 23       	and	r24, r24
    131c:	2c f4       	brge	.+10     	; 0x1328 <LCD_sendCommand+0x176>
		__ticks = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	3f c0       	rjmp	.+126    	; 0x13a6 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1328:	6b a1       	ldd	r22, Y+35	; 0x23
    132a:	7c a1       	ldd	r23, Y+36	; 0x24
    132c:	8d a1       	ldd	r24, Y+37	; 0x25
    132e:	9e a1       	ldd	r25, Y+38	; 0x26
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	3f ef       	ldi	r19, 0xFF	; 255
    1334:	4f e7       	ldi	r20, 0x7F	; 127
    1336:	57 e4       	ldi	r21, 0x47	; 71
    1338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    133c:	18 16       	cp	r1, r24
    133e:	4c f5       	brge	.+82     	; 0x1392 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1340:	6f a1       	ldd	r22, Y+39	; 0x27
    1342:	78 a5       	ldd	r23, Y+40	; 0x28
    1344:	89 a5       	ldd	r24, Y+41	; 0x29
    1346:	9a a5       	ldd	r25, Y+42	; 0x2a
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e2       	ldi	r20, 0x20	; 32
    134e:	51 e4       	ldi	r21, 0x41	; 65
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9a a3       	std	Y+34, r25	; 0x22
    1366:	89 a3       	std	Y+33, r24	; 0x21
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <LCD_sendCommand+0x1d6>
    136a:	88 ec       	ldi	r24, 0xC8	; 200
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	98 a3       	std	Y+32, r25	; 0x20
    1370:	8f 8f       	std	Y+31, r24	; 0x1f
    1372:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1374:	98 a1       	ldd	r25, Y+32	; 0x20
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <LCD_sendCommand+0x1c4>
    137a:	98 a3       	std	Y+32, r25	; 0x20
    137c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137e:	89 a1       	ldd	r24, Y+33	; 0x21
    1380:	9a a1       	ldd	r25, Y+34	; 0x22
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9a a3       	std	Y+34, r25	; 0x22
    1386:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	89 a1       	ldd	r24, Y+33	; 0x21
    138a:	9a a1       	ldd	r25, Y+34	; 0x22
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	69 f7       	brne	.-38     	; 0x136a <LCD_sendCommand+0x1b8>
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1392:	6b a1       	ldd	r22, Y+35	; 0x23
    1394:	7c a1       	ldd	r23, Y+36	; 0x24
    1396:	8d a1       	ldd	r24, Y+37	; 0x25
    1398:	9e a1       	ldd	r25, Y+38	; 0x26
    139a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9a a3       	std	Y+34, r25	; 0x22
    13a4:	89 a3       	std	Y+33, r24	; 0x21
    13a6:	89 a1       	ldd	r24, Y+33	; 0x21
    13a8:	9a a1       	ldd	r25, Y+34	; 0x22
    13aa:	9e 8f       	std	Y+30, r25	; 0x1e
    13ac:	8d 8f       	std	Y+29, r24	; 0x1d
    13ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <LCD_sendCommand+0x200>
    13b6:	9e 8f       	std	Y+30, r25	; 0x1e
    13b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    13ba:	e5 e3       	ldi	r30, 0x35	; 53
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	89 ad       	ldd	r24, Y+57	; 0x39
    13c0:	80 83       	st	Z, r24
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e8       	ldi	r26, 0x80	; 128
    13c8:	bf e3       	ldi	r27, 0x3F	; 63
    13ca:	89 8f       	std	Y+25, r24	; 0x19
    13cc:	9a 8f       	std	Y+26, r25	; 0x1a
    13ce:	ab 8f       	std	Y+27, r26	; 0x1b
    13d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	69 8d       	ldd	r22, Y+25	; 0x19
    13d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a ef       	ldi	r20, 0xFA	; 250
    13e0:	54 e4       	ldi	r21, 0x44	; 68
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8d 8b       	std	Y+21, r24	; 0x15
    13ec:	9e 8b       	std	Y+22, r25	; 0x16
    13ee:	af 8b       	std	Y+23, r26	; 0x17
    13f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <LCD_sendCommand+0x262>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	69 8d       	ldd	r22, Y+25	; 0x19
    142e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <LCD_sendCommand+0x2c2>
    1456:	88 ec       	ldi	r24, 0xC8	; 200
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9a 8b       	std	Y+18, r25	; 0x12
    145c:	89 8b       	std	Y+17, r24	; 0x11
    145e:	89 89       	ldd	r24, Y+17	; 0x11
    1460:	9a 89       	ldd	r25, Y+18	; 0x12
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <LCD_sendCommand+0x2b0>
    1466:	9a 8b       	std	Y+18, r25	; 0x12
    1468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8b 89       	ldd	r24, Y+19	; 0x13
    146c:	9c 89       	ldd	r25, Y+20	; 0x14
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9c 8b       	std	Y+20, r25	; 0x14
    1472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <LCD_sendCommand+0x2a4>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	8f 89       	ldd	r24, Y+23	; 0x17
    1484:	98 8d       	ldd	r25, Y+24	; 0x18
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	8b 8b       	std	Y+19, r24	; 0x13
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	98 8b       	std	Y+16, r25	; 0x10
    1498:	8f 87       	std	Y+15, r24	; 0x0f
    149a:	8f 85       	ldd	r24, Y+15	; 0x0f
    149c:	98 89       	ldd	r25, Y+16	; 0x10
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <LCD_sendCommand+0x2ec>
    14a2:	98 8b       	std	Y+16, r25	; 0x10
    14a4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    14a6:	ab e3       	ldi	r26, 0x3B	; 59
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	eb e3       	ldi	r30, 0x3B	; 59
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8f 7b       	andi	r24, 0xBF	; 191
    14b2:	8c 93       	st	X, r24
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a0 e8       	ldi	r26, 0x80	; 128
    14ba:	bf e3       	ldi	r27, 0x3F	; 63
    14bc:	8b 87       	std	Y+11, r24	; 0x0b
    14be:	9c 87       	std	Y+12, r25	; 0x0c
    14c0:	ad 87       	std	Y+13, r26	; 0x0d
    14c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	4a ef       	ldi	r20, 0xFA	; 250
    14d2:	54 e4       	ldi	r21, 0x44	; 68
    14d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	8f 83       	std	Y+7, r24	; 0x07
    14de:	98 87       	std	Y+8, r25	; 0x08
    14e0:	a9 87       	std	Y+9, r26	; 0x09
    14e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e4:	6f 81       	ldd	r22, Y+7	; 0x07
    14e6:	78 85       	ldd	r23, Y+8	; 0x08
    14e8:	89 85       	ldd	r24, Y+9	; 0x09
    14ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e8       	ldi	r20, 0x80	; 128
    14f2:	5f e3       	ldi	r21, 0x3F	; 63
    14f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14f8:	88 23       	and	r24, r24
    14fa:	2c f4       	brge	.+10     	; 0x1506 <LCD_sendCommand+0x354>
		__ticks = 1;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	3f c0       	rjmp	.+126    	; 0x1584 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1506:	6f 81       	ldd	r22, Y+7	; 0x07
    1508:	78 85       	ldd	r23, Y+8	; 0x08
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	3f ef       	ldi	r19, 0xFF	; 255
    1512:	4f e7       	ldi	r20, 0x7F	; 127
    1514:	57 e4       	ldi	r21, 0x47	; 71
    1516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    151a:	18 16       	cp	r1, r24
    151c:	4c f5       	brge	.+82     	; 0x1570 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1520:	7c 85       	ldd	r23, Y+12	; 0x0c
    1522:	8d 85       	ldd	r24, Y+13	; 0x0d
    1524:	9e 85       	ldd	r25, Y+14	; 0x0e
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e2       	ldi	r20, 0x20	; 32
    152c:	51 e4       	ldi	r21, 0x41	; 65
    152e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	0f c0       	rjmp	.+30     	; 0x1566 <LCD_sendCommand+0x3b4>
    1548:	88 ec       	ldi	r24, 0xC8	; 200
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <LCD_sendCommand+0x3a2>
    1558:	9c 83       	std	Y+4, r25	; 0x04
    155a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	69 f7       	brne	.-38     	; 0x1548 <LCD_sendCommand+0x396>
    156e:	14 c0       	rjmp	.+40     	; 0x1598 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1570:	6f 81       	ldd	r22, Y+7	; 0x07
    1572:	78 85       	ldd	r23, Y+8	; 0x08
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <LCD_sendCommand+0x3de>
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */

}
    1598:	e9 96       	adiw	r28, 0x39	; 57
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	e9 97       	sbiw	r28, 0x39	; 57
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    15c0:	ab e3       	ldi	r26, 0x3B	; 59
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e3       	ldi	r30, 0x3B	; 59
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 61       	ori	r24, 0x10	; 16
    15cc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    15ce:	ab e3       	ldi	r26, 0x3B	; 59
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	eb e3       	ldi	r30, 0x3B	; 59
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 7d       	andi	r24, 0xDF	; 223
    15da:	8c 93       	st	X, r24
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e8       	ldi	r26, 0x80	; 128
    15e2:	bf e3       	ldi	r27, 0x3F	; 63
    15e4:	8d ab       	std	Y+53, r24	; 0x35
    15e6:	9e ab       	std	Y+54, r25	; 0x36
    15e8:	af ab       	std	Y+55, r26	; 0x37
    15ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ec:	6d a9       	ldd	r22, Y+53	; 0x35
    15ee:	7e a9       	ldd	r23, Y+54	; 0x36
    15f0:	8f a9       	ldd	r24, Y+55	; 0x37
    15f2:	98 ad       	ldd	r25, Y+56	; 0x38
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4a ef       	ldi	r20, 0xFA	; 250
    15fa:	54 e4       	ldi	r21, 0x44	; 68
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	89 ab       	std	Y+49, r24	; 0x31
    1606:	9a ab       	std	Y+50, r25	; 0x32
    1608:	ab ab       	std	Y+51, r26	; 0x33
    160a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    160c:	69 a9       	ldd	r22, Y+49	; 0x31
    160e:	7a a9       	ldd	r23, Y+50	; 0x32
    1610:	8b a9       	ldd	r24, Y+51	; 0x33
    1612:	9c a9       	ldd	r25, Y+52	; 0x34
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e8       	ldi	r20, 0x80	; 128
    161a:	5f e3       	ldi	r21, 0x3F	; 63
    161c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1620:	88 23       	and	r24, r24
    1622:	2c f4       	brge	.+10     	; 0x162e <LCD_displayCharacter+0x84>
		__ticks = 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	98 ab       	std	Y+48, r25	; 0x30
    162a:	8f a7       	std	Y+47, r24	; 0x2f
    162c:	3f c0       	rjmp	.+126    	; 0x16ac <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    162e:	69 a9       	ldd	r22, Y+49	; 0x31
    1630:	7a a9       	ldd	r23, Y+50	; 0x32
    1632:	8b a9       	ldd	r24, Y+51	; 0x33
    1634:	9c a9       	ldd	r25, Y+52	; 0x34
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	3f ef       	ldi	r19, 0xFF	; 255
    163a:	4f e7       	ldi	r20, 0x7F	; 127
    163c:	57 e4       	ldi	r21, 0x47	; 71
    163e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1642:	18 16       	cp	r1, r24
    1644:	4c f5       	brge	.+82     	; 0x1698 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1646:	6d a9       	ldd	r22, Y+53	; 0x35
    1648:	7e a9       	ldd	r23, Y+54	; 0x36
    164a:	8f a9       	ldd	r24, Y+55	; 0x37
    164c:	98 ad       	ldd	r25, Y+56	; 0x38
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e2       	ldi	r20, 0x20	; 32
    1654:	51 e4       	ldi	r21, 0x41	; 65
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	98 ab       	std	Y+48, r25	; 0x30
    166c:	8f a7       	std	Y+47, r24	; 0x2f
    166e:	0f c0       	rjmp	.+30     	; 0x168e <LCD_displayCharacter+0xe4>
    1670:	88 ec       	ldi	r24, 0xC8	; 200
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9e a7       	std	Y+46, r25	; 0x2e
    1676:	8d a7       	std	Y+45, r24	; 0x2d
    1678:	8d a5       	ldd	r24, Y+45	; 0x2d
    167a:	9e a5       	ldd	r25, Y+46	; 0x2e
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <LCD_displayCharacter+0xd2>
    1680:	9e a7       	std	Y+46, r25	; 0x2e
    1682:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1684:	8f a5       	ldd	r24, Y+47	; 0x2f
    1686:	98 a9       	ldd	r25, Y+48	; 0x30
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	98 ab       	std	Y+48, r25	; 0x30
    168c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1690:	98 a9       	ldd	r25, Y+48	; 0x30
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	69 f7       	brne	.-38     	; 0x1670 <LCD_displayCharacter+0xc6>
    1696:	14 c0       	rjmp	.+40     	; 0x16c0 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1698:	69 a9       	ldd	r22, Y+49	; 0x31
    169a:	7a a9       	ldd	r23, Y+50	; 0x32
    169c:	8b a9       	ldd	r24, Y+51	; 0x33
    169e:	9c a9       	ldd	r25, Y+52	; 0x34
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	98 ab       	std	Y+48, r25	; 0x30
    16aa:	8f a7       	std	Y+47, r24	; 0x2f
    16ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ae:	98 a9       	ldd	r25, Y+48	; 0x30
    16b0:	9c a7       	std	Y+44, r25	; 0x2c
    16b2:	8b a7       	std	Y+43, r24	; 0x2b
    16b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <LCD_displayCharacter+0x10e>
    16bc:	9c a7       	std	Y+44, r25	; 0x2c
    16be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    16c0:	ab e3       	ldi	r26, 0x3B	; 59
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	80 64       	ori	r24, 0x40	; 64
    16cc:	8c 93       	st	X, r24
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e8       	ldi	r26, 0x80	; 128
    16d4:	bf e3       	ldi	r27, 0x3F	; 63
    16d6:	8f a3       	std	Y+39, r24	; 0x27
    16d8:	98 a7       	std	Y+40, r25	; 0x28
    16da:	a9 a7       	std	Y+41, r26	; 0x29
    16dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16de:	6f a1       	ldd	r22, Y+39	; 0x27
    16e0:	78 a5       	ldd	r23, Y+40	; 0x28
    16e2:	89 a5       	ldd	r24, Y+41	; 0x29
    16e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	4a ef       	ldi	r20, 0xFA	; 250
    16ec:	54 e4       	ldi	r21, 0x44	; 68
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	8b a3       	std	Y+35, r24	; 0x23
    16f8:	9c a3       	std	Y+36, r25	; 0x24
    16fa:	ad a3       	std	Y+37, r26	; 0x25
    16fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1700:	7c a1       	ldd	r23, Y+36	; 0x24
    1702:	8d a1       	ldd	r24, Y+37	; 0x25
    1704:	9e a1       	ldd	r25, Y+38	; 0x26
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e8       	ldi	r20, 0x80	; 128
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1712:	88 23       	and	r24, r24
    1714:	2c f4       	brge	.+10     	; 0x1720 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9a a3       	std	Y+34, r25	; 0x22
    171c:	89 a3       	std	Y+33, r24	; 0x21
    171e:	3f c0       	rjmp	.+126    	; 0x179e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1720:	6b a1       	ldd	r22, Y+35	; 0x23
    1722:	7c a1       	ldd	r23, Y+36	; 0x24
    1724:	8d a1       	ldd	r24, Y+37	; 0x25
    1726:	9e a1       	ldd	r25, Y+38	; 0x26
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	3f ef       	ldi	r19, 0xFF	; 255
    172c:	4f e7       	ldi	r20, 0x7F	; 127
    172e:	57 e4       	ldi	r21, 0x47	; 71
    1730:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1734:	18 16       	cp	r1, r24
    1736:	4c f5       	brge	.+82     	; 0x178a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1738:	6f a1       	ldd	r22, Y+39	; 0x27
    173a:	78 a5       	ldd	r23, Y+40	; 0x28
    173c:	89 a5       	ldd	r24, Y+41	; 0x29
    173e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	51 e4       	ldi	r21, 0x41	; 65
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9a a3       	std	Y+34, r25	; 0x22
    175e:	89 a3       	std	Y+33, r24	; 0x21
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <LCD_displayCharacter+0x1d6>
    1762:	88 ec       	ldi	r24, 0xC8	; 200
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	98 a3       	std	Y+32, r25	; 0x20
    1768:	8f 8f       	std	Y+31, r24	; 0x1f
    176a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    176c:	98 a1       	ldd	r25, Y+32	; 0x20
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <LCD_displayCharacter+0x1c4>
    1772:	98 a3       	std	Y+32, r25	; 0x20
    1774:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1776:	89 a1       	ldd	r24, Y+33	; 0x21
    1778:	9a a1       	ldd	r25, Y+34	; 0x22
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	9a a3       	std	Y+34, r25	; 0x22
    177e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1780:	89 a1       	ldd	r24, Y+33	; 0x21
    1782:	9a a1       	ldd	r25, Y+34	; 0x22
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	69 f7       	brne	.-38     	; 0x1762 <LCD_displayCharacter+0x1b8>
    1788:	14 c0       	rjmp	.+40     	; 0x17b2 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178a:	6b a1       	ldd	r22, Y+35	; 0x23
    178c:	7c a1       	ldd	r23, Y+36	; 0x24
    178e:	8d a1       	ldd	r24, Y+37	; 0x25
    1790:	9e a1       	ldd	r25, Y+38	; 0x26
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	9a a3       	std	Y+34, r25	; 0x22
    179c:	89 a3       	std	Y+33, r24	; 0x21
    179e:	89 a1       	ldd	r24, Y+33	; 0x21
    17a0:	9a a1       	ldd	r25, Y+34	; 0x22
    17a2:	9e 8f       	std	Y+30, r25	; 0x1e
    17a4:	8d 8f       	std	Y+29, r24	; 0x1d
    17a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <LCD_displayCharacter+0x200>
    17ae:	9e 8f       	std	Y+30, r25	; 0x1e
    17b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
    17b2:	e5 e3       	ldi	r30, 0x35	; 53
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	89 ad       	ldd	r24, Y+57	; 0x39
    17b8:	80 83       	st	Z, r24
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e8       	ldi	r26, 0x80	; 128
    17c0:	bf e3       	ldi	r27, 0x3F	; 63
    17c2:	89 8f       	std	Y+25, r24	; 0x19
    17c4:	9a 8f       	std	Y+26, r25	; 0x1a
    17c6:	ab 8f       	std	Y+27, r26	; 0x1b
    17c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	69 8d       	ldd	r22, Y+25	; 0x19
    17cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a ef       	ldi	r20, 0xFA	; 250
    17d8:	54 e4       	ldi	r21, 0x44	; 68
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8d 8b       	std	Y+21, r24	; 0x15
    17e4:	9e 8b       	std	Y+22, r25	; 0x16
    17e6:	af 8b       	std	Y+23, r26	; 0x17
    17e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17ea:	6d 89       	ldd	r22, Y+21	; 0x15
    17ec:	7e 89       	ldd	r23, Y+22	; 0x16
    17ee:	8f 89       	ldd	r24, Y+23	; 0x17
    17f0:	98 8d       	ldd	r25, Y+24	; 0x18
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <LCD_displayCharacter+0x262>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9c 8b       	std	Y+20, r25	; 0x14
    1808:	8b 8b       	std	Y+19, r24	; 0x13
    180a:	3f c0       	rjmp	.+126    	; 0x188a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    180c:	6d 89       	ldd	r22, Y+21	; 0x15
    180e:	7e 89       	ldd	r23, Y+22	; 0x16
    1810:	8f 89       	ldd	r24, Y+23	; 0x17
    1812:	98 8d       	ldd	r25, Y+24	; 0x18
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	69 8d       	ldd	r22, Y+25	; 0x19
    1826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9c 8b       	std	Y+20, r25	; 0x14
    184a:	8b 8b       	std	Y+19, r24	; 0x13
    184c:	0f c0       	rjmp	.+30     	; 0x186c <LCD_displayCharacter+0x2c2>
    184e:	88 ec       	ldi	r24, 0xC8	; 200
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9a 8b       	std	Y+18, r25	; 0x12
    1854:	89 8b       	std	Y+17, r24	; 0x11
    1856:	89 89       	ldd	r24, Y+17	; 0x11
    1858:	9a 89       	ldd	r25, Y+18	; 0x12
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_displayCharacter+0x2b0>
    185e:	9a 8b       	std	Y+18, r25	; 0x12
    1860:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8b 89       	ldd	r24, Y+19	; 0x13
    1864:	9c 89       	ldd	r25, Y+20	; 0x14
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9c 8b       	std	Y+20, r25	; 0x14
    186a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8b 89       	ldd	r24, Y+19	; 0x13
    186e:	9c 89       	ldd	r25, Y+20	; 0x14
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <LCD_displayCharacter+0x2a4>
    1874:	14 c0       	rjmp	.+40     	; 0x189e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	6d 89       	ldd	r22, Y+21	; 0x15
    1878:	7e 89       	ldd	r23, Y+22	; 0x16
    187a:	8f 89       	ldd	r24, Y+23	; 0x17
    187c:	98 8d       	ldd	r25, Y+24	; 0x18
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	98 8b       	std	Y+16, r25	; 0x10
    1890:	8f 87       	std	Y+15, r24	; 0x0f
    1892:	8f 85       	ldd	r24, Y+15	; 0x0f
    1894:	98 89       	ldd	r25, Y+16	; 0x10
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_displayCharacter+0x2ec>
    189a:	98 8b       	std	Y+16, r25	; 0x10
    189c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    189e:	ab e3       	ldi	r26, 0x3B	; 59
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	eb e3       	ldi	r30, 0x3B	; 59
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8f 7b       	andi	r24, 0xBF	; 191
    18aa:	8c 93       	st	X, r24
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a0 e8       	ldi	r26, 0x80	; 128
    18b2:	bf e3       	ldi	r27, 0x3F	; 63
    18b4:	8b 87       	std	Y+11, r24	; 0x0b
    18b6:	9c 87       	std	Y+12, r25	; 0x0c
    18b8:	ad 87       	std	Y+13, r26	; 0x0d
    18ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18be:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a ef       	ldi	r20, 0xFA	; 250
    18ca:	54 e4       	ldi	r21, 0x44	; 68
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8f 83       	std	Y+7, r24	; 0x07
    18d6:	98 87       	std	Y+8, r25	; 0x08
    18d8:	a9 87       	std	Y+9, r26	; 0x09
    18da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e8       	ldi	r20, 0x80	; 128
    18ea:	5f e3       	ldi	r21, 0x3F	; 63
    18ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f0:	88 23       	and	r24, r24
    18f2:	2c f4       	brge	.+10     	; 0x18fe <LCD_displayCharacter+0x354>
		__ticks = 1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	3f c0       	rjmp	.+126    	; 0x197c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    18fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1900:	78 85       	ldd	r23, Y+8	; 0x08
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	3f ef       	ldi	r19, 0xFF	; 255
    190a:	4f e7       	ldi	r20, 0x7F	; 127
    190c:	57 e4       	ldi	r21, 0x47	; 71
    190e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1912:	18 16       	cp	r1, r24
    1914:	4c f5       	brge	.+82     	; 0x1968 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1916:	6b 85       	ldd	r22, Y+11	; 0x0b
    1918:	7c 85       	ldd	r23, Y+12	; 0x0c
    191a:	8d 85       	ldd	r24, Y+13	; 0x0d
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e2       	ldi	r20, 0x20	; 32
    1924:	51 e4       	ldi	r21, 0x41	; 65
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
    193e:	0f c0       	rjmp	.+30     	; 0x195e <LCD_displayCharacter+0x3b4>
    1940:	88 ec       	ldi	r24, 0xC8	; 200
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_displayCharacter+0x3a2>
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	69 f7       	brne	.-38     	; 0x1940 <LCD_displayCharacter+0x396>
    1966:	14 c0       	rjmp	.+40     	; 0x1990 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	9a 81       	ldd	r25, Y+2	; 0x02
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_displayCharacter+0x3de>
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns */
}
    1990:	e9 96       	adiw	r28, 0x39	; 57
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <LCD_displayString+0x6>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	9b 83       	std	Y+3, r25	; 0x03
    19b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19b2:	19 82       	std	Y+1, r1	; 0x01
    19b4:	0e c0       	rjmp	.+28     	; 0x19d2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	9b 81       	ldd	r25, Y+3	; 0x03
    19c0:	fc 01       	movw	r30, r24
    19c2:	e2 0f       	add	r30, r18
    19c4:	f3 1f       	adc	r31, r19
    19c6:	80 81       	ld	r24, Z
    19c8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_displayCharacter>
		i++;
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	9b 81       	ldd	r25, Y+3	; 0x03
    19dc:	fc 01       	movw	r30, r24
    19de:	e2 0f       	add	r30, r18
    19e0:	f3 1f       	adc	r31, r19
    19e2:	80 81       	ld	r24, Z
    19e4:	88 23       	and	r24, r24
    19e6:	39 f7       	brne	.-50     	; 0x19b6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <LCD_goToRowColumn+0x6>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <LCD_goToRowColumn+0x8>
    19fc:	0f 92       	push	r0
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	8a 83       	std	Y+2, r24	; 0x02
    1a04:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	3d 83       	std	Y+5, r19	; 0x05
    1a0e:	2c 83       	std	Y+4, r18	; 0x04
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	9d 81       	ldd	r25, Y+5	; 0x05
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	91 05       	cpc	r25, r1
    1a18:	c1 f0       	breq	.+48     	; 0x1a4a <LCD_goToRowColumn+0x56>
    1a1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1e:	22 30       	cpi	r18, 0x02	; 2
    1a20:	31 05       	cpc	r19, r1
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_goToRowColumn+0x3a>
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	9d 81       	ldd	r25, Y+5	; 0x05
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	61 f0       	breq	.+24     	; 0x1a44 <LCD_goToRowColumn+0x50>
    1a2c:	19 c0       	rjmp	.+50     	; 0x1a60 <LCD_goToRowColumn+0x6c>
    1a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a30:	3d 81       	ldd	r19, Y+5	; 0x05
    1a32:	22 30       	cpi	r18, 0x02	; 2
    1a34:	31 05       	cpc	r19, r1
    1a36:	69 f0       	breq	.+26     	; 0x1a52 <LCD_goToRowColumn+0x5e>
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	91 05       	cpc	r25, r1
    1a40:	61 f0       	breq	.+24     	; 0x1a5a <LCD_goToRowColumn+0x66>
    1a42:	0e c0       	rjmp	.+28     	; 0x1a60 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	0b c0       	rjmp	.+22     	; 0x1a60 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	80 5c       	subi	r24, 0xC0	; 192
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	07 c0       	rjmp	.+14     	; 0x1a60 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	80 5f       	subi	r24, 0xF0	; 240
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	80 5b       	subi	r24, 0xB0	; 176
    1a5e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_sendCommand>
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <LCD_displayStringRowColumn+0x6>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <LCD_displayStringRowColumn+0x8>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	6a 83       	std	Y+2, r22	; 0x02
    1a88:	5c 83       	std	Y+4, r21	; 0x04
    1a8a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a90:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_displayString>
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	62 97       	sbiw	r28, 0x12	; 18
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	9a 8b       	std	Y+18, r25	; 0x12
    1ac0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
  itoa(data,buff,10); /* 10 for decimal */
    1ac2:	89 89       	ldd	r24, Y+17	; 0x11
    1ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac6:	9e 01       	movw	r18, r28
    1ac8:	2f 5f       	subi	r18, 0xFF	; 255
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	b9 01       	movw	r22, r18
    1ace:	4a e0       	ldi	r20, 0x0A	; 10
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	0e 94 ba 10 	call	0x2174	; 0x2174 <itoa>
   LCD_displayString(buff);
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_displayString>
}
    1ade:	62 96       	adiw	r28, 0x12	; 18
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_sendCommand>
}
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <main>:
#include "lcd.h"
#include"UltraSonic.h"
uint16 distance;

int main(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    1b18:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_init>
	UltraSonic_init();
    1b1c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <UltraSonic_init>
	LCD_clearScreen();
    1b20:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_clearScreen>
	while(1){
		UltraSonic_display_distance();
    1b24:	0e 94 b0 07 	call	0xf60	; 0xf60 <UltraSonic_display_distance>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e4       	ldi	r27, 0x40	; 64
    1b30:	8b 87       	std	Y+11, r24	; 0x0b
    1b32:	9c 87       	std	Y+12, r25	; 0x0c
    1b34:	ad 87       	std	Y+13, r26	; 0x0d
    1b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8f 83       	std	Y+7, r24	; 0x07
    1b52:	98 87       	std	Y+8, r25	; 0x08
    1b54:	a9 87       	std	Y+9, r26	; 0x09
    1b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <main+0x76>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <main+0xf4>
	else if (__tmp > 65535)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <main+0xd6>
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <main+0xc4>
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <main+0xb8>
    1be2:	a0 cf       	rjmp	.-192    	; 0x1b24 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <main+0x100>
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	8b cf       	rjmp	.-234    	; 0x1b24 <main+0x20>

00001c0e <read_smoke_data>:

#include"smoke_sensor.h"
uint8 smoke=0,old_smoke=0;

/****fun to read smoke percent from sensor*******/
void read_smoke_data(void){
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <read_smoke_data+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <read_smoke_data+0x8>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
	old_smoke=smoke;
    1c1a:	80 91 8a 00 	lds	r24, 0x008A
    1c1e:	80 93 8b 00 	sts	0x008B, r24
	uint32 smoke_sensor_read= adc_read_channel(0); 	// read channel 0 where the smoke sensor conect
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <adc_read_channel>
    1c28:	cc 01       	movw	r24, r24
    1c2a:	a0 e0       	ldi	r26, 0x00	; 0
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	ab 83       	std	Y+3, r26	; 0x03
    1c34:	bc 83       	std	Y+4, r27	; 0x04
	smoke_sensor_read= smoke_sensor_read*100/1023 ;  		// precentage of smoke on air
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c3c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c3e:	24 e6       	ldi	r18, 0x64	; 100
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 1b 10 	call	0x2036	; 0x2036 <__mulsi3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	2f ef       	ldi	r18, 0xFF	; 255
    1c54:	33 e0       	ldi	r19, 0x03	; 3
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 4d 10 	call	0x209a	; 0x209a <__udivmodsi4>
    1c62:	da 01       	movw	r26, r20
    1c64:	c9 01       	movw	r24, r18
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	ab 83       	std	Y+3, r26	; 0x03
    1c6c:	bc 83       	std	Y+4, r27	; 0x04
	smoke = (uint8)smoke_sensor_read;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	80 93 8a 00 	sts	0x008A, r24
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <send_smoke_data>:


void send_smoke_data(void){
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
	if(smoke != old_smoke){
    1c96:	90 91 8a 00 	lds	r25, 0x008A
    1c9a:	80 91 8b 00 	lds	r24, 0x008B
    1c9e:	98 17       	cp	r25, r24
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <send_smoke_data+0x22>
    1ca2:	79 c0       	rjmp	.+242    	; 0x1d96 <send_smoke_data+0x114>

		uart_send_byte('s');
    1ca4:	83 e7       	ldi	r24, 0x73	; 115
    1ca6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <uart_send_byte>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e0       	ldi	r26, 0x00	; 0
    1cb0:	b0 e4       	ldi	r27, 0x40	; 64
    1cb2:	8b 87       	std	Y+11, r24	; 0x0b
    1cb4:	9c 87       	std	Y+12, r25	; 0x0c
    1cb6:	ad 87       	std	Y+13, r26	; 0x0d
    1cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	98 87       	std	Y+8, r25	; 0x08
    1cd6:	a9 87       	std	Y+9, r26	; 0x09
    1cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <send_smoke_data+0x7a>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <send_smoke_data+0xf8>
	else if (__tmp > 65535)
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <send_smoke_data+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <send_smoke_data+0xda>
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <send_smoke_data+0xc8>
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <send_smoke_data+0xbc>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <send_smoke_data+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <send_smoke_data+0x104>
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		uart_send_byte(smoke);
    1d8e:	80 91 8a 00 	lds	r24, 0x008A
    1d92:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <uart_send_byte>
	}
}
    1d96:	2e 96       	adiw	r28, 0x0e	; 14
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <display_smoke_data>:

void display_smoke_data(void){
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	if(smoke != old_smoke){
    1db0:	90 91 8a 00 	lds	r25, 0x008A
    1db4:	80 91 8b 00 	lds	r24, 0x008B
    1db8:	98 17       	cp	r25, r24
    1dba:	89 f0       	breq	.+34     	; 0x1dde <display_smoke_data+0x36>
		LCD_displayStringRowColumn(0,0,"SMOKE = ");
    1dbc:	22 e7       	ldi	r18, 0x72	; 114
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_displayStringRowColumn>
		LCD_intgerToString(smoke); 		//display the read on LCD
    1dca:	80 91 8a 00 	lds	r24, 0x008A
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_intgerToString>
		LCD_displayString("  % ");		//when reads move from 3 digit to 2 or to 1 digit this to clear the over digit 100 to 99 or 10 to 9
    1dd6:	8b e7       	ldi	r24, 0x7B	; 123
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <LCD_displayString>
	}
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <fire_alarm>:
void fire_alarm(void){
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	2e 97       	sbiw	r28, 0x0e	; 14
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
	on_led(RED_LED);  //give alarm
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	0e 94 2f 08 	call	0x105e	; 0x105e <on_led>
	uart_send_byte('s');
    1dfe:	83 e7       	ldi	r24, 0x73	; 115
    1e00:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <uart_send_byte>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e4       	ldi	r27, 0x40	; 64
    1e0c:	8b 87       	std	Y+11, r24	; 0x0b
    1e0e:	9c 87       	std	Y+12, r25	; 0x0c
    1e10:	ad 87       	std	Y+13, r26	; 0x0d
    1e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a ef       	ldi	r20, 0xFA	; 250
    1e22:	54 e4       	ldi	r21, 0x44	; 68
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	8f 83       	std	Y+7, r24	; 0x07
    1e2e:	98 87       	std	Y+8, r25	; 0x08
    1e30:	a9 87       	std	Y+9, r26	; 0x09
    1e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e34:	6f 81       	ldd	r22, Y+7	; 0x07
    1e36:	78 85       	ldd	r23, Y+8	; 0x08
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <fire_alarm+0x72>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <fire_alarm+0xf0>
	else if (__tmp > 65535)
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <fire_alarm+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <fire_alarm+0xd2>
    1e98:	88 ec       	ldi	r24, 0xC8	; 200
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <fire_alarm+0xc0>
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <fire_alarm+0xb4>
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <fire_alarm+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <fire_alarm+0xfc>
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	uart_send_byte(101);  //'e'
    1ee8:	85 e6       	ldi	r24, 0x65	; 101
    1eea:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <uart_send_byte>
}
    1eee:	2e 96       	adiw	r28, 0x0e	; 14
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <uart_init>:

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)


/*****fun to initial uart**********/
void uart_init(){
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	/************************ UCSRA register ***********************/
	/*bit 1 :  U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1f08:	eb e2       	ldi	r30, 0x2B	; 43
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	80 83       	st	Z, r24
	 * bit 4 : RXEN  = 1 Receiver Enable
	 * bit 3 : RXEN  = 1 Transmitter Enable
	 * bit 2 : UCSZ2 = 0 For 8-bit data mode
	 * bit 1&0 : RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN); //enable RX and TX
    1f10:	ea e2       	ldi	r30, 0x2A	; 42
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	88 e1       	ldi	r24, 0x18	; 24
    1f16:	80 83       	st	Z, r24
	 * bit 5-4 : UPM1:0  = 00 Disable parity bit
	 * bit 3 : USBS    = 0 One stop bit
	 * bit 2-1 : UCSZ1:0 = 11 For 8-bit data mode
	 * bit 0 : UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); //sel 8 bit mode
    1f18:	e0 e4       	ldi	r30, 0x40	; 64
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	86 e8       	ldi	r24, 0x86	; 134
    1f1e:	80 83       	st	Z, r24

	/************************** UBRRH &UBRRL  registers **************************/
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = BAUD_PRESCALE>>8;
    1f20:	e0 e4       	ldi	r30, 0x40	; 64
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	10 82       	st	Z, r1
		UBRRL = BAUD_PRESCALE;
    1f26:	e9 e2       	ldi	r30, 0x29	; 41
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	87 e6       	ldi	r24, 0x67	; 103
    1f2c:	80 83       	st	Z, r24

}
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <uart_send_byte>:

/************fun to send byte *************/
void uart_send_byte(uint8 data){
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <uart_send_byte+0x6>
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	/// wait for flag UDRE is 1
	//if UDRE=1 the buffer is empty and ready to be written
	while( !(UCSRA|(1<<UDRE)) ){}
    1f40:	eb e2       	ldi	r30, 0x2B	; 43
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
	// writre data to data reg
UDR=data;
    1f46:	ec e2       	ldi	r30, 0x2C	; 44
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	80 83       	st	Z, r24
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <uart_recirve_byte>:

/*****fun to recieve byte ***********/
uint8 uart_recirve_byte(){
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	/// wait for flag RXC is 1
	//if RXC=1 the UART recieve complete

	while( !(UCSRA|(1<<RXC)) ){}
    1f62:	eb e2       	ldi	r30, 0x2B	; 43
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
	return UDR ;
    1f68:	ec e2       	ldi	r30, 0x2C	; 44
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
}
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <uart_send_string>:

/******** fun to send string ************/
void uart_send_string(uint8* string){
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <uart_send_string+0x6>
    1f7c:	0f 92       	push	r0
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	9b 83       	std	Y+3, r25	; 0x03
    1f84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1f86:	19 82       	std	Y+1, r1	; 0x01
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <uart_send_string+0x30>
	while (string[i] != '\0'){
		uart_send_byte(string[i]);
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	9b 81       	ldd	r25, Y+3	; 0x03
    1f94:	fc 01       	movw	r30, r24
    1f96:	e2 0f       	add	r30, r18
    1f98:	f3 1f       	adc	r31, r19
    1f9a:	80 81       	ld	r24, Z
    1f9c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <uart_send_byte>
		i++;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	8f 5f       	subi	r24, 0xFF	; 255
    1fa4:	89 83       	std	Y+1, r24	; 0x01
}

/******** fun to send string ************/
void uart_send_string(uint8* string){
	uint8 i=0;
	while (string[i] != '\0'){
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	e2 0f       	add	r30, r18
    1fb4:	f3 1f       	adc	r31, r19
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 23       	and	r24, r24
    1fba:	39 f7       	brne	.-50     	; 0x1f8a <uart_send_string+0x14>
		uart_send_byte(string[i]);
		i++;
	}
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <uart_recievr_string>:

void uart_recievr_string(uint8* string){
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <uart_recievr_string+0xa>
    1fd2:	0f 92       	push	r0
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9b 83       	std	Y+3, r25	; 0x03
    1fda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1fdc:	19 82       	std	Y+1, r1	; 0x01
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <uart_recievr_string+0x36>
	while (string[i] != '#'){
	string[i]=uart_recirve_byte();
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fea:	8c 01       	movw	r16, r24
    1fec:	02 0f       	add	r16, r18
    1fee:	13 1f       	adc	r17, r19
    1ff0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <uart_recirve_byte>
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	80 83       	st	Z, r24
			i++;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	}
}

void uart_recievr_string(uint8* string){
	uint8 i=0;
	while (string[i] != '#'){
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	9b 81       	ldd	r25, Y+3	; 0x03
    2008:	fc 01       	movw	r30, r24
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	80 81       	ld	r24, Z
    2010:	83 32       	cpi	r24, 0x23	; 35
    2012:	31 f7       	brne	.-52     	; 0x1fe0 <uart_recievr_string+0x18>
	string[i]=uart_recirve_byte();
			i++;
		}
	string[i]='\0';
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	fc 01       	movw	r30, r24
    2020:	e2 0f       	add	r30, r18
    2022:	f3 1f       	adc	r31, r19
    2024:	10 82       	st	Z, r1
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	08 95       	ret

00002036 <__mulsi3>:
    2036:	62 9f       	mul	r22, r18
    2038:	d0 01       	movw	r26, r0
    203a:	73 9f       	mul	r23, r19
    203c:	f0 01       	movw	r30, r0
    203e:	82 9f       	mul	r24, r18
    2040:	e0 0d       	add	r30, r0
    2042:	f1 1d       	adc	r31, r1
    2044:	64 9f       	mul	r22, r20
    2046:	e0 0d       	add	r30, r0
    2048:	f1 1d       	adc	r31, r1
    204a:	92 9f       	mul	r25, r18
    204c:	f0 0d       	add	r31, r0
    204e:	83 9f       	mul	r24, r19
    2050:	f0 0d       	add	r31, r0
    2052:	74 9f       	mul	r23, r20
    2054:	f0 0d       	add	r31, r0
    2056:	65 9f       	mul	r22, r21
    2058:	f0 0d       	add	r31, r0
    205a:	99 27       	eor	r25, r25
    205c:	72 9f       	mul	r23, r18
    205e:	b0 0d       	add	r27, r0
    2060:	e1 1d       	adc	r30, r1
    2062:	f9 1f       	adc	r31, r25
    2064:	63 9f       	mul	r22, r19
    2066:	b0 0d       	add	r27, r0
    2068:	e1 1d       	adc	r30, r1
    206a:	f9 1f       	adc	r31, r25
    206c:	bd 01       	movw	r22, r26
    206e:	cf 01       	movw	r24, r30
    2070:	11 24       	eor	r1, r1
    2072:	08 95       	ret

00002074 <__divmodhi4>:
    2074:	97 fb       	bst	r25, 7
    2076:	09 2e       	mov	r0, r25
    2078:	07 26       	eor	r0, r23
    207a:	0a d0       	rcall	.+20     	; 0x2090 <__divmodhi4_neg1>
    207c:	77 fd       	sbrc	r23, 7
    207e:	04 d0       	rcall	.+8      	; 0x2088 <__divmodhi4_neg2>
    2080:	2e d0       	rcall	.+92     	; 0x20de <__udivmodhi4>
    2082:	06 d0       	rcall	.+12     	; 0x2090 <__divmodhi4_neg1>
    2084:	00 20       	and	r0, r0
    2086:	1a f4       	brpl	.+6      	; 0x208e <__divmodhi4_exit>

00002088 <__divmodhi4_neg2>:
    2088:	70 95       	com	r23
    208a:	61 95       	neg	r22
    208c:	7f 4f       	sbci	r23, 0xFF	; 255

0000208e <__divmodhi4_exit>:
    208e:	08 95       	ret

00002090 <__divmodhi4_neg1>:
    2090:	f6 f7       	brtc	.-4      	; 0x208e <__divmodhi4_exit>
    2092:	90 95       	com	r25
    2094:	81 95       	neg	r24
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	08 95       	ret

0000209a <__udivmodsi4>:
    209a:	a1 e2       	ldi	r26, 0x21	; 33
    209c:	1a 2e       	mov	r1, r26
    209e:	aa 1b       	sub	r26, r26
    20a0:	bb 1b       	sub	r27, r27
    20a2:	fd 01       	movw	r30, r26
    20a4:	0d c0       	rjmp	.+26     	; 0x20c0 <__udivmodsi4_ep>

000020a6 <__udivmodsi4_loop>:
    20a6:	aa 1f       	adc	r26, r26
    20a8:	bb 1f       	adc	r27, r27
    20aa:	ee 1f       	adc	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	a2 17       	cp	r26, r18
    20b0:	b3 07       	cpc	r27, r19
    20b2:	e4 07       	cpc	r30, r20
    20b4:	f5 07       	cpc	r31, r21
    20b6:	20 f0       	brcs	.+8      	; 0x20c0 <__udivmodsi4_ep>
    20b8:	a2 1b       	sub	r26, r18
    20ba:	b3 0b       	sbc	r27, r19
    20bc:	e4 0b       	sbc	r30, r20
    20be:	f5 0b       	sbc	r31, r21

000020c0 <__udivmodsi4_ep>:
    20c0:	66 1f       	adc	r22, r22
    20c2:	77 1f       	adc	r23, r23
    20c4:	88 1f       	adc	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	1a 94       	dec	r1
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <__udivmodsi4_loop>
    20cc:	60 95       	com	r22
    20ce:	70 95       	com	r23
    20d0:	80 95       	com	r24
    20d2:	90 95       	com	r25
    20d4:	9b 01       	movw	r18, r22
    20d6:	ac 01       	movw	r20, r24
    20d8:	bd 01       	movw	r22, r26
    20da:	cf 01       	movw	r24, r30
    20dc:	08 95       	ret

000020de <__udivmodhi4>:
    20de:	aa 1b       	sub	r26, r26
    20e0:	bb 1b       	sub	r27, r27
    20e2:	51 e1       	ldi	r21, 0x11	; 17
    20e4:	07 c0       	rjmp	.+14     	; 0x20f4 <__udivmodhi4_ep>

000020e6 <__udivmodhi4_loop>:
    20e6:	aa 1f       	adc	r26, r26
    20e8:	bb 1f       	adc	r27, r27
    20ea:	a6 17       	cp	r26, r22
    20ec:	b7 07       	cpc	r27, r23
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <__udivmodhi4_ep>
    20f0:	a6 1b       	sub	r26, r22
    20f2:	b7 0b       	sbc	r27, r23

000020f4 <__udivmodhi4_ep>:
    20f4:	88 1f       	adc	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	5a 95       	dec	r21
    20fa:	a9 f7       	brne	.-22     	; 0x20e6 <__udivmodhi4_loop>
    20fc:	80 95       	com	r24
    20fe:	90 95       	com	r25
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	08 95       	ret

00002106 <__prologue_saves__>:
    2106:	2f 92       	push	r2
    2108:	3f 92       	push	r3
    210a:	4f 92       	push	r4
    210c:	5f 92       	push	r5
    210e:	6f 92       	push	r6
    2110:	7f 92       	push	r7
    2112:	8f 92       	push	r8
    2114:	9f 92       	push	r9
    2116:	af 92       	push	r10
    2118:	bf 92       	push	r11
    211a:	cf 92       	push	r12
    211c:	df 92       	push	r13
    211e:	ef 92       	push	r14
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	ca 1b       	sub	r28, r26
    2130:	db 0b       	sbc	r29, r27
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	09 94       	ijmp

0000213e <__epilogue_restores__>:
    213e:	2a 88       	ldd	r2, Y+18	; 0x12
    2140:	39 88       	ldd	r3, Y+17	; 0x11
    2142:	48 88       	ldd	r4, Y+16	; 0x10
    2144:	5f 84       	ldd	r5, Y+15	; 0x0f
    2146:	6e 84       	ldd	r6, Y+14	; 0x0e
    2148:	7d 84       	ldd	r7, Y+13	; 0x0d
    214a:	8c 84       	ldd	r8, Y+12	; 0x0c
    214c:	9b 84       	ldd	r9, Y+11	; 0x0b
    214e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2150:	b9 84       	ldd	r11, Y+9	; 0x09
    2152:	c8 84       	ldd	r12, Y+8	; 0x08
    2154:	df 80       	ldd	r13, Y+7	; 0x07
    2156:	ee 80       	ldd	r14, Y+6	; 0x06
    2158:	fd 80       	ldd	r15, Y+5	; 0x05
    215a:	0c 81       	ldd	r16, Y+4	; 0x04
    215c:	1b 81       	ldd	r17, Y+3	; 0x03
    215e:	aa 81       	ldd	r26, Y+2	; 0x02
    2160:	b9 81       	ldd	r27, Y+1	; 0x01
    2162:	ce 0f       	add	r28, r30
    2164:	d1 1d       	adc	r29, r1
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	ed 01       	movw	r28, r26
    2172:	08 95       	ret

00002174 <itoa>:
    2174:	fb 01       	movw	r30, r22
    2176:	9f 01       	movw	r18, r30
    2178:	e8 94       	clt
    217a:	42 30       	cpi	r20, 0x02	; 2
    217c:	c4 f0       	brlt	.+48     	; 0x21ae <itoa+0x3a>
    217e:	45 32       	cpi	r20, 0x25	; 37
    2180:	b4 f4       	brge	.+44     	; 0x21ae <itoa+0x3a>
    2182:	4a 30       	cpi	r20, 0x0A	; 10
    2184:	29 f4       	brne	.+10     	; 0x2190 <itoa+0x1c>
    2186:	97 fb       	bst	r25, 7
    2188:	1e f4       	brtc	.+6      	; 0x2190 <itoa+0x1c>
    218a:	90 95       	com	r25
    218c:	81 95       	neg	r24
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	64 2f       	mov	r22, r20
    2192:	77 27       	eor	r23, r23
    2194:	0e 94 6f 10 	call	0x20de	; 0x20de <__udivmodhi4>
    2198:	80 5d       	subi	r24, 0xD0	; 208
    219a:	8a 33       	cpi	r24, 0x3A	; 58
    219c:	0c f0       	brlt	.+2      	; 0x21a0 <itoa+0x2c>
    219e:	89 5d       	subi	r24, 0xD9	; 217
    21a0:	81 93       	st	Z+, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	a1 f7       	brne	.-24     	; 0x2190 <itoa+0x1c>
    21a8:	16 f4       	brtc	.+4      	; 0x21ae <itoa+0x3a>
    21aa:	5d e2       	ldi	r21, 0x2D	; 45
    21ac:	51 93       	st	Z+, r21
    21ae:	10 82       	st	Z, r1
    21b0:	c9 01       	movw	r24, r18
    21b2:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <strrev>

000021b6 <strrev>:
    21b6:	dc 01       	movw	r26, r24
    21b8:	fc 01       	movw	r30, r24
    21ba:	67 2f       	mov	r22, r23
    21bc:	71 91       	ld	r23, Z+
    21be:	77 23       	and	r23, r23
    21c0:	e1 f7       	brne	.-8      	; 0x21ba <strrev+0x4>
    21c2:	32 97       	sbiw	r30, 0x02	; 2
    21c4:	04 c0       	rjmp	.+8      	; 0x21ce <strrev+0x18>
    21c6:	7c 91       	ld	r23, X
    21c8:	6d 93       	st	X+, r22
    21ca:	70 83       	st	Z, r23
    21cc:	62 91       	ld	r22, -Z
    21ce:	ae 17       	cp	r26, r30
    21d0:	bf 07       	cpc	r27, r31
    21d2:	c8 f3       	brcs	.-14     	; 0x21c6 <strrev+0x10>
    21d4:	08 95       	ret

000021d6 <_exit>:
    21d6:	f8 94       	cli

000021d8 <__stop_program>:
    21d8:	ff cf       	rjmp	.-2      	; 0x21d8 <__stop_program>
